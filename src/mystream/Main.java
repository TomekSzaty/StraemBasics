package mystream;

import mystream.iterate.NumbersGenerator;
import mystream.lambda.ExecuteSaySomething;
import mystream.lambda.Executor;
import mystream.lambda.Processor;
import mystream.lambda.SaySomething;
import mystream.lambdawitharguments.MathCounter;
import mystream.lambdawitharguments.MathExpression;
import mystream.reference.FunctionalCalculator;

public class Main {
    public static void main(String[] args) {

        ExecuteSaySomething executeSaySomething = new ExecuteSaySomething();
        Processor processor = new Processor();
        Executor codeToExecute = () -> System.out.println("That she said...");
        processor.execute(executeSaySomething);
        processor.execute(codeToExecute);
        processor.execute(() -> System.out.println("I say ;)"));

        System.out.println("Even number generated by stream");
        NumbersGenerator.generateEven(22);
        System.out.println("Odd number generated by stream");
        NumbersGenerator.generateOdd(22);

        MathCounter mathCounter = new MathCounter();
        System.out.println("Calculation with using lambda");
        mathCounter.mathExecute(2.0, 3.0, (a, b) -> a + b);
        mathCounter.mathExecute(2.0, 3.0, (a, b) -> a * b);
        mathCounter.mathExecute(2.0, 3.0, (a, b) -> b - a);
        mathCounter.mathExecute(2.0, 3.0, (a, b) -> b / a);
        System.out.println("Calculation with using method reference");
        mathCounter.mathExecute(8.0, 4.0, FunctionalCalculator::addAandB);
        mathCounter.mathExecute(8.0, 4.0, FunctionalCalculator::subtractAandB);
        mathCounter.mathExecute(8.0, 4.0, FunctionalCalculator::divideAandB);
        mathCounter.mathExecute(8.0, 4.0, FunctionalCalculator::moduloAandB);
        mathCounter.mathExecute(8.0, 4.0, FunctionalCalculator::multiplyAandb);
    }
}